/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.whipitupitude.market;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TradeOpportunityAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4510639576086200735L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradeOpportunityAvro\",\"namespace\":\"com.whipitupitude.market\",\"fields\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"positionPrice\",\"type\":\"double\"},{\"name\":\"tradePrice\",\"type\":\"double\"},{\"name\":\"buySell\",\"type\":\"string\"},{\"name\":\"positionQuantity\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TradeOpportunityAvro> ENCODER =
      new BinaryMessageEncoder<TradeOpportunityAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TradeOpportunityAvro> DECODER =
      new BinaryMessageDecoder<TradeOpportunityAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TradeOpportunityAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TradeOpportunityAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TradeOpportunityAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TradeOpportunityAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TradeOpportunityAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TradeOpportunityAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TradeOpportunityAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TradeOpportunityAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence symbol;
  private double positionPrice;
  private double tradePrice;
  private java.lang.CharSequence buySell;
  private int positionQuantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TradeOpportunityAvro() {}

  /**
   * All-args constructor.
   * @param symbol The new value for symbol
   * @param positionPrice The new value for positionPrice
   * @param tradePrice The new value for tradePrice
   * @param buySell The new value for buySell
   * @param positionQuantity The new value for positionQuantity
   */
  public TradeOpportunityAvro(java.lang.CharSequence symbol, java.lang.Double positionPrice, java.lang.Double tradePrice, java.lang.CharSequence buySell, java.lang.Integer positionQuantity) {
    this.symbol = symbol;
    this.positionPrice = positionPrice;
    this.tradePrice = tradePrice;
    this.buySell = buySell;
    this.positionQuantity = positionQuantity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return positionPrice;
    case 2: return tradePrice;
    case 3: return buySell;
    case 4: return positionQuantity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = (java.lang.CharSequence)value$; break;
    case 1: positionPrice = (java.lang.Double)value$; break;
    case 2: tradePrice = (java.lang.Double)value$; break;
    case 3: buySell = (java.lang.CharSequence)value$; break;
    case 4: positionQuantity = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'positionPrice' field.
   * @return The value of the 'positionPrice' field.
   */
  public double getPositionPrice() {
    return positionPrice;
  }


  /**
   * Sets the value of the 'positionPrice' field.
   * @param value the value to set.
   */
  public void setPositionPrice(double value) {
    this.positionPrice = value;
  }

  /**
   * Gets the value of the 'tradePrice' field.
   * @return The value of the 'tradePrice' field.
   */
  public double getTradePrice() {
    return tradePrice;
  }


  /**
   * Sets the value of the 'tradePrice' field.
   * @param value the value to set.
   */
  public void setTradePrice(double value) {
    this.tradePrice = value;
  }

  /**
   * Gets the value of the 'buySell' field.
   * @return The value of the 'buySell' field.
   */
  public java.lang.CharSequence getBuySell() {
    return buySell;
  }


  /**
   * Sets the value of the 'buySell' field.
   * @param value the value to set.
   */
  public void setBuySell(java.lang.CharSequence value) {
    this.buySell = value;
  }

  /**
   * Gets the value of the 'positionQuantity' field.
   * @return The value of the 'positionQuantity' field.
   */
  public int getPositionQuantity() {
    return positionQuantity;
  }


  /**
   * Sets the value of the 'positionQuantity' field.
   * @param value the value to set.
   */
  public void setPositionQuantity(int value) {
    this.positionQuantity = value;
  }

  /**
   * Creates a new TradeOpportunityAvro RecordBuilder.
   * @return A new TradeOpportunityAvro RecordBuilder
   */
  public static com.whipitupitude.market.TradeOpportunityAvro.Builder newBuilder() {
    return new com.whipitupitude.market.TradeOpportunityAvro.Builder();
  }

  /**
   * Creates a new TradeOpportunityAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TradeOpportunityAvro RecordBuilder
   */
  public static com.whipitupitude.market.TradeOpportunityAvro.Builder newBuilder(com.whipitupitude.market.TradeOpportunityAvro.Builder other) {
    if (other == null) {
      return new com.whipitupitude.market.TradeOpportunityAvro.Builder();
    } else {
      return new com.whipitupitude.market.TradeOpportunityAvro.Builder(other);
    }
  }

  /**
   * Creates a new TradeOpportunityAvro RecordBuilder by copying an existing TradeOpportunityAvro instance.
   * @param other The existing instance to copy.
   * @return A new TradeOpportunityAvro RecordBuilder
   */
  public static com.whipitupitude.market.TradeOpportunityAvro.Builder newBuilder(com.whipitupitude.market.TradeOpportunityAvro other) {
    if (other == null) {
      return new com.whipitupitude.market.TradeOpportunityAvro.Builder();
    } else {
      return new com.whipitupitude.market.TradeOpportunityAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TradeOpportunityAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradeOpportunityAvro>
    implements org.apache.avro.data.RecordBuilder<TradeOpportunityAvro> {

    private java.lang.CharSequence symbol;
    private double positionPrice;
    private double tradePrice;
    private java.lang.CharSequence buySell;
    private int positionQuantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.whipitupitude.market.TradeOpportunityAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.positionPrice)) {
        this.positionPrice = data().deepCopy(fields()[1].schema(), other.positionPrice);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tradePrice)) {
        this.tradePrice = data().deepCopy(fields()[2].schema(), other.tradePrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.buySell)) {
        this.buySell = data().deepCopy(fields()[3].schema(), other.buySell);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.positionQuantity)) {
        this.positionQuantity = data().deepCopy(fields()[4].schema(), other.positionQuantity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TradeOpportunityAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.whipitupitude.market.TradeOpportunityAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.positionPrice)) {
        this.positionPrice = data().deepCopy(fields()[1].schema(), other.positionPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradePrice)) {
        this.tradePrice = data().deepCopy(fields()[2].schema(), other.tradePrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.buySell)) {
        this.buySell = data().deepCopy(fields()[3].schema(), other.buySell);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.positionQuantity)) {
        this.positionQuantity = data().deepCopy(fields()[4].schema(), other.positionQuantity);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'positionPrice' field.
      * @return The value.
      */
    public double getPositionPrice() {
      return positionPrice;
    }


    /**
      * Sets the value of the 'positionPrice' field.
      * @param value The value of 'positionPrice'.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder setPositionPrice(double value) {
      validate(fields()[1], value);
      this.positionPrice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'positionPrice' field has been set.
      * @return True if the 'positionPrice' field has been set, false otherwise.
      */
    public boolean hasPositionPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'positionPrice' field.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder clearPositionPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradePrice' field.
      * @return The value.
      */
    public double getTradePrice() {
      return tradePrice;
    }


    /**
      * Sets the value of the 'tradePrice' field.
      * @param value The value of 'tradePrice'.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder setTradePrice(double value) {
      validate(fields()[2], value);
      this.tradePrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradePrice' field has been set.
      * @return True if the 'tradePrice' field has been set, false otherwise.
      */
    public boolean hasTradePrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradePrice' field.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder clearTradePrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'buySell' field.
      * @return The value.
      */
    public java.lang.CharSequence getBuySell() {
      return buySell;
    }


    /**
      * Sets the value of the 'buySell' field.
      * @param value The value of 'buySell'.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder setBuySell(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.buySell = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'buySell' field has been set.
      * @return True if the 'buySell' field has been set, false otherwise.
      */
    public boolean hasBuySell() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'buySell' field.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder clearBuySell() {
      buySell = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'positionQuantity' field.
      * @return The value.
      */
    public int getPositionQuantity() {
      return positionQuantity;
    }


    /**
      * Sets the value of the 'positionQuantity' field.
      * @param value The value of 'positionQuantity'.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder setPositionQuantity(int value) {
      validate(fields()[4], value);
      this.positionQuantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'positionQuantity' field has been set.
      * @return True if the 'positionQuantity' field has been set, false otherwise.
      */
    public boolean hasPositionQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'positionQuantity' field.
      * @return This builder.
      */
    public com.whipitupitude.market.TradeOpportunityAvro.Builder clearPositionQuantity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TradeOpportunityAvro build() {
      try {
        TradeOpportunityAvro record = new TradeOpportunityAvro();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.positionPrice = fieldSetFlags()[1] ? this.positionPrice : (java.lang.Double) defaultValue(fields()[1]);
        record.tradePrice = fieldSetFlags()[2] ? this.tradePrice : (java.lang.Double) defaultValue(fields()[2]);
        record.buySell = fieldSetFlags()[3] ? this.buySell : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.positionQuantity = fieldSetFlags()[4] ? this.positionQuantity : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TradeOpportunityAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TradeOpportunityAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TradeOpportunityAvro>
    READER$ = (org.apache.avro.io.DatumReader<TradeOpportunityAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.symbol);

    out.writeDouble(this.positionPrice);

    out.writeDouble(this.tradePrice);

    out.writeString(this.buySell);

    out.writeInt(this.positionQuantity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);

      this.positionPrice = in.readDouble();

      this.tradePrice = in.readDouble();

      this.buySell = in.readString(this.buySell instanceof Utf8 ? (Utf8)this.buySell : null);

      this.positionQuantity = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);
          break;

        case 1:
          this.positionPrice = in.readDouble();
          break;

        case 2:
          this.tradePrice = in.readDouble();
          break;

        case 3:
          this.buySell = in.readString(this.buySell instanceof Utf8 ? (Utf8)this.buySell : null);
          break;

        case 4:
          this.positionQuantity = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










